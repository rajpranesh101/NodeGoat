name: Dep

on:
  pull_request:
    branches:
      - '**' # This will match all branches
    paths:
      - '**/package.json' # Only trigger if dependency files are changed
      - '**/package-lock.json'
      - '**/requirements.txt'
      - '**/Gemfile'
      - '**/Pipfile'
jobs:
  dependency-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Run Dependency Review (without failing the workflow)
      - name: Dependency Review
        id: review
        uses: actions/dependency-review-action@v3
        continue-on-error: true # This ensures the workflow continues even if vulnerabilities are found

      # Step 3: Print dependency-review.json for debugging (with error handling)
      - name: Debug - Print dependency-review.json
        run: |
          if [ -f "dependency-review.json" ]; then
            echo "Contents of dependency-review.json:"
            cat dependency-review.json
          else
            echo "dependency-review.json not found. Continuing..."
          fi
          exit 0 # Always pass this step

      # Step 4: Fetch CVE IDs from GHSA URLs (with error handling)
      - name: Fetch CVE IDs from GHSA URLs
        id: fetch_cves
        run: |
          if [ -f "dependency-review.json" ]; then
            # Read dependency-review.json
            vulnerabilities=$(cat dependency-review.json | jq -c '.vulnerabilities[]')

            # Fetch CVE IDs for each GHSA URL
            echo "Fetching CVE IDs for GHSAs..."
            cve_map="{}"
            for vuln in $vulnerabilities; do
              ghsa_url=$(echo "$vuln" | jq -r '.advisoryUrl')
              if [[ $ghsa_url == *"GHSA"* ]]; then
                echo "Fetching CVE for GHSA: $ghsa_url"
                cve_id=$(curl -s "$ghsa_url" | grep -oP 'CVE-\d{4}-\d+' | head -n 1)
                if [[ -n "$cve_id" ]]; then
                  cve_map=$(echo "$cve_map" | jq --arg ghsa "$ghsa_url" --arg cve "$cve_id" '. + {($ghsa): $cve}')
                fi
              fi
            done

            # Save the GHSA to CVE mapping
            echo "$cve_map" > ghsa_to_cve_map.json
            echo "GHSA to CVE mapping saved to ghsa_to_cve_map.json"
          else
            echo "dependency-review.json not found. Skipping CVE fetching."
          fi
          exit 0 # Always pass this step

      # Step 5: Print ghsa_to_cve_map.json for debugging
      - name: Debug - Print ghsa_to_cve_map.json
        run: |
          if [ -f "ghsa_to_cve_map.json" ]; then
            echo "Contents of ghsa_to_cve_map.json:"
            cat ghsa_to_cve_map.json
          else
            echo "ghsa_to_cve_map.json not found. Continuing..."
          fi
          exit 0 # Always pass this step

      # Step 6: Filter vulnerabilities using the local known vulnerabilities list (with error handling)
      - name: Filter vulnerabilities
        run: |
          if [ -f "dependency-review.json" ] && [ -f "ghsa_to_cve_map.json" ] && [ -f "josys_known_ve_list.json" ]; then
            # Read dependency review results, known vulnerabilities, and GHSA to CVE mapping
            node <<EOF
            const fs = require('fs');
            const reviewResults = JSON.parse(fs.readFileSync('dependency-review.json', 'utf8'));
            const knownVulnerabilities = JSON.parse(fs.readFileSync('josys_known_ve_list.json', 'utf8')).Exception_List;
            const cveMap = JSON.parse(fs.readFileSync('ghsa_to_cve_map.json', 'utf8'));

            // Extract detected vulnerabilities
            const vulnerabilities = reviewResults.vulnerabilities || [];
            const unignoredVulnerabilities = vulnerabilities.filter(v => {
              const cveId = cveMap[v.advisoryUrl];
              return !knownVulnerabilities.includes(cveId);
            });

            if (unignoredVulnerabilities.length > 0) {
              console.log('New vulnerabilities detected:');
              unignoredVulnerabilities.forEach(v => {
                console.log(\`- ${v.advisoryUrl} (${v.severity})\`);
              });
            } else {
              console.log('No new vulnerabilities detected.');
            }
            EOF
          else
            echo "Required files (dependency-review.json, ghsa_to_cve_map.json, or josys_known_ve_list.json) not found. Skipping vulnerability filtering."
          fi
          exit 0 # Always pass this step
