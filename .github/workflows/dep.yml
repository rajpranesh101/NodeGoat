name: Dependency Review with Known Vulnerabilities

on:
  push:
    branches:
      - '**' # Match all branches
    paths:
      - '**/package.json' # Trigger for dependency-related files
      - '**/package-lock.json'
      - '**/requirements.txt'
      - '**/Gemfile'
      - '**/Pipfile'

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Run Dependency Review
      - name: Dependency Review
        id: review
        uses: advanced-security/dependency-review-action@v1
        with:
          output: dependency-review.json # Save results
          fail-on-severity: none # Prevent failing CI

      # Step 3: Debug - Print dependency-review.json
      - name: Debug - Print dependency-review.json
        run: |
          echo "Contents of dependency-review.json:"
          cat dependency-review.json

      # Step 4: Fetch CVE IDs from GHSA URLs
      - name: Fetch CVE IDs from GHSA URLs
        id: fetch_cves
        run: |
          vulnerabilities=$(jq -c '.vulnerabilities[]' < dependency-review.json)
          cve_map="{}"
          for vuln in $vulnerabilities; do
            ghsa_url=$(echo "$vuln" | jq -r '.advisoryUrl')
            if [[ $ghsa_url == *"GHSA"* ]]; then
              cve_id=$(curl -s "$ghsa_url" | grep -oP 'CVE-\d{4}-\d+' | head -n 1)
              if [[ -n "$cve_id" ]]; then
                cve_map=$(echo "$cve_map" | jq --arg ghsa "$ghsa_url" --arg cve "$cve_id" '. + {($ghsa): $cve}')
              fi
            fi
          done
          echo "$cve_map" > ghsa_to_cve_map.json

      # Step 5: Filter vulnerabilities using a known list
      - name: Filter vulnerabilities
        run: |
          node <<EOF
          const fs = require('fs');
          const reviewResults = JSON.parse(fs.readFileSync('dependency-review.json', 'utf8'));
          const knownVulnerabilities = JSON.parse(fs.readFileSync('josys_known_ve_list.json', 'utf8')).Exception_List;
          const cveMap = JSON.parse(fs.readFileSync('ghsa_to_cve_map.json', 'utf8'));
          const vulnerabilities = reviewResults.vulnerabilities || [];
          const unignoredVulnerabilities = vulnerabilities.filter(v => {
            const cveId = cveMap[v.advisoryUrl];
            return !knownVulnerabilities.includes(cveId);
          });
          console.log('Filtered vulnerabilities:', unignoredVulnerabilities);
          fs.writeFileSync('filtered_vulnerabilities.json', JSON.stringify(unignoredVulnerabilities, null, 2));
          EOF
